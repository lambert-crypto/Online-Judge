generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  statement   String
  constraints String
  examples    String
  timeLimit   Int
  memoryLimit Int
  testcases   Testcase?
  difficulty  Difficulty
  tags        String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Testcase {
  input     String   @unique
  output    String
  Problem   Problem? @relation(fields: [problemId], references: [id])
  problemId String?  @unique
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// model Tag {
//   id       String    @id @default(uuid())
//   name     String    @unique
//   problems Problem[]

//   @@map("tags")
// }
